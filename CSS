CSS

* div  —> only for structure and division of content
	  —> purposeless without CSS
	  —> default height = defined by contained content
	  —> otherwise: can define height inside CSS

css units
px = pixels
% = amount of screen/parent
em = 16px; relative to font size of the element
rem = 16px; relative to font size of the root element
vw = relative to 1% of the width of the viewport
vh = relative to 1% of the height of the viewport
min-content = box is size of longest word
max-content = box sized to max width/height of content; will not wrap; will overflow


shortcuts for clockwise measurements

	- margin: 5%; = all sides

	- margin: 5% 0; = top and bottom: 5%, left and right: 0

	- margin: 0 10 0; = top: 0, left and right: 10, bottom: 0

	- margin: 0 10 50 8; =  top:0, right:10, bottom:50, left: 0 

Default Premises of CSS

1) Content is Everything
	
	- height and width of content determines layout
	- before any CSS is applied

2) Order Comes from Code

	- img > h1: image displayed above heading
	- h1 > img: heading displayed above image

3) Children Sit on Parents

	*z -index : the 3rd dimension measured away from screen

	—> think of elements as stacked boxes
	—> children elements are more towards the viewer
	—> therefore, away from screen

4) All HTML Elements are position: static by default

The Box Model

	•	Width/Height
	⁃	default will hold element within box

	•	Padding
	⁃	increases parent box size away from child
	⁃	thus, will also affect surrounding elements 

	•	Border
	⁃	expands beyond size of container
	⁃	ex) border: solid 50px;
	⁃	default 3px

	•	Margin
	⁃	space outside of element, between elements

Outer-Display Properties

	•	block
	⁃	takes up entire width of screen
	⁃	able to respond to height and width properties
	⁃	ex) <p>, <h1> - <h6>, <div>, <ol>, <ul>, <li>, <form>

	•	inline
	⁃	only takes up width necessary for element
	⁃	multiple elements CAN sit on same line
	⁃	ex) <span>, <images>, <a>

	•	inline-block
	⁃	can sit on same line AND can respond to sizing
	⁃	automatically adds slight spacing between elements

	•	none
	⁃	does not take up any space; as if it wasn’t there at all

	•	visibility: hidden
	⁃	remains invisible, still holds space

Position

	•	static
	⁃	the default position, keep to HTML flow

	•	relative
	⁃	relative to how it would sit, had it been static
	⁃	coordinates: top, bottom, left, right
	⁃	essentially applying a margin to that side
	⁃	ex) left: 30px; ==> moves 30px to right
	⁃	does not affect surrounding elements
	⁃	will move right over them!

	•	absolute
	⁃	positions element relative to parent
	⁃	same system of coordinates
	⁃	but… in relation to parent
	⁃	ex) right: 30px ==> 30px from right side of parent 
	⁃	DOES affect surrounding elements
	⁃	moving absolute element, takes it out of default HTML flow

	•	absolute child inside relative parent
	⁃	perfect option to fine tune page layout 

	•	fixed
	⁃	keeps element placed, regardless of scrolling
	⁃	perfect for navbar

Centering Elements

	•	text-align: center;
	⁃	for parent element of child

	•	margin: auto;
	⁃	centers element vertically or horizontally depending where you set it
	⁃	ex) margin: 0 auto 0 auto; <— horizontally centered!
	⁃	or… 0 auto;	

Float / Clear
*allows for text to wrap image when inside same div

* clear = anti-float; use to specify an element you want to escape float

	ex) clear: left;

- possible values are: left, right, none, and inherit (from parent)


Z-Index
* for ordering of divs (bottom to top)
-higher number = closer to viewer, seems to be relative

ex) z-index: 3;

Targeting All Children of Parent:

.parent  > * {

}


Target Single Element of Multi-Class Instances

ex) <article class=“card> card </article>
	 <article class=“card> card </article> <— target this element
	 <article class=“card> card </article>

	.card:nth-child(2) {
		background: pink;
	}
		*note: 0 != 1; 1 = 1

Flexbox

1) apply display:flex to parent

2) children automatically lose display status, become flex items

3) flex items are each their own column of content

4) flex items want to be as small as possible to remain on 1 line

5) parent sets ground rules, but children have lots of control

* default: column widths are equal to length of content w/o line breaks 

properties of flexbox

*flex-shrink : factor of shrinkage for flex items when container is too small

	* ratio of shrinking, default = flex-shrink: 1

	ex) flex-shrink: 0;      or.   flex-shrink: 1;

*flex-grow: takes unused space of parent and distributes among items; applied to item

	* ratio of growth

	-  0 = default and off

*flex-wrap: allows for wrapping of container if space becomes to small

	- wrap or nowrap

*flex-basis: best thought of as width of flex items

	-default: auto (this does not allow for equal spacing)

* flex: short-hand, takes 3 values (flex-grow, flex-shrink, flex-basis)

	ex) flex: 1; 
		 -equal to: {flex-grow:1; flex-shrink:1; flex-basis:0}

*flex-direction: column or row; for parent
	
	- default = row

	- children are perpendicular!

		ex) flex-direction: column;

				—> flex items will render horizontally (rows)

*gap: adds space between flex items; applied to container

*justify-content: applies to main axis (flex-direction); only works with leftover space

	* can create leftover space by applying height or width to parent
	
		pro-tip: give “min-height”; not fixed!

	-center: uses leftover space to spread equally to both sides of content
	
	-flex-start: default; justifies left

	-flex-end: justifies right

	-space-between: equally distributes leftover space between items

	-space-evenly: equally distributes leftover space everywhere; including before and after 1st and last item

*align-items: applies to cross-axis (child direction); must be placed inside parent!

		—> only applies to single item, you can specialize to fit single cases

			bc: its applying to column/row with single item!

	- stretch: default; all items fill to end of flexbox

	- flex-start: height/width snaps to intrinsic size (block-style)

	- flex-end: starting at end, height/width of elements snaps to intrinsic size

	- center: centers contents inside cross-access; requires leftover space

*align-self: same as align-items; used for single-instance override

Flexbox vs. Grid


Transition
* 4 properties limit for high-performance on most browsers :

	- opacity()
		- set value 0 - 1

	- scale()
		- enter a number as percentage

		 ex) transform: scale(.5); => 50%

		- 2 values translates to (width, height)

		ex) transform: scale(1, .5); => same width, half height 

		** transform: scale (1, 0); => disappear 

		
	translate()

	rotate()

Responsivity

-media queries

	@media screen and (min-width: resolution){ }

* all: unset;
	
	-magic reset that removes all previous css styles from an element 

	1) Mindset
		
		- layout is already responsive before CSS is written
		- when things “break”, you wrote the code that caused this
		
	2) Start with global styles first
		- typography, colors, etc…
	
		ex) 
			body, h1, h2, h3, p { margin: 0;}
	

			h1, h2, h3 {line-height: 1;}

			h2, h3, p {margin-bottom: 1em;}
	

			img { display:block; max-width: 100%;}

		*for text to stay away from sides…
			.container{ padding: 0 1em;}

	3) Avoid fixed sizes

			ex) width: 600px;

					nah!!!

			—> max-width: 600px; 

			—> better yet max-width: 60rem;

			ex) height: 60rem;

					nah!!!
	
			—> min-height: 60rem;

	4) Use @media queries to ADD COMPLEXITY

		* start with mobile, use (min-width) to indicate when things need to be complex
		
		* add queries where breakpoints occur, keep to 2 max if possible

		*40em—> common breakpoint!

		* min width to consider: 320px!

	5) Take advantage of modern CSS to avoid so many breakpoints

			ex) clamp()
		

Fonts

	•	font-size
	⁃	1em = 16px = 100%
	⁃	em, % are inherited from parents

			ex) body {
					font-size: 2em;
				}

				h1 {
					font-size: 5.63em;
				}
	  
	⁃	rem = ignores inheritance 
	⁃	px is NOT inherited
