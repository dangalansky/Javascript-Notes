CSS

* div  —> only for structure and division of content
	  —> purposeless without CSS
	  —> default height = defined by contained content
	  —> otherwise: can define height inside CSS

css units
px = pixels
% = amount of screen

Default Premises of CSS

1) Content is Everything
	
	- height and width of content determines layout
	- before any CSS is applied

2) Order Comes from Code

	- img > h1: image displayed above heading
	- h1 > img: heading displayed above image

3) Children Sit on Parents

	*z -index : the 3rd dimension measured away from screen

	—> think of elements as stacked boxes
	—> children elements are more towards the viewer
	—> therefore, away from screen

4) All HTML Elements are position: static by default

The Box Model

	•	Width/Height
	⁃	default will hold element within box

	•	Padding
	⁃	increases parent box size away from child
	⁃	thus, will also affect surrounding elements 

	•	Border
	⁃	expands beyond size of container
	⁃	ex) border: solid 50px;
	⁃	default 3px

	•	Margin
	⁃	space outside of element, between elements

Outer-Display Properties

	•	block
	⁃	takes up entire width of screen
	⁃	able to respond to height and width properties
	⁃	ex) <p>, <h1> - <h6>, <div>, <ol>, <ul>, <li>, <form>

	•	inline
	⁃	only takes up width necessary for element
	⁃	multiple elements CAN sit on same line
	⁃	ex) <span>, <images>, <a>

	•	inline-block
	⁃	can sit on same line AND can respond to sizing
	⁃	automatically adds slight spacing between elements

	•	none
	⁃	does not take up any space; as if it wasn’t there at all

	•	visibility: hidden
	⁃	remains invisible, still holds space

Position

	•	static
	⁃	the default position, keep to HTML flow

	•	relative
	⁃	relative to how it would sit, had it been static
	⁃	coordinates: top, bottom, left, right
	⁃	essentially applying a margin to that side
	⁃	ex) left: 30px; ==> moves 30px to right
	⁃	does not affect surrounding elements
	⁃	will move right over them!

	•	absolute
	⁃	positions element relative to parent
	⁃	same system of coordinates
	⁃	but… in relation to parent
	⁃	ex) right: 30px ==> 30px from right side of parent 
	⁃	DOES affect surrounding elements
	⁃	moving absolute element, takes it out of default HTML flow

	•	absolute child inside relative parent
	⁃	perfect option to fine tune page layout 

	•	fixed
	⁃	keeps element placed, regardless of scrolling
	⁃	perfect for navbar
